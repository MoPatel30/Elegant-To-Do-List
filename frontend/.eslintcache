[{"C:\\Users\\mopat\\fs-practice\\frontend\\src\\index.js":"1","C:\\Users\\mopat\\fs-practice\\frontend\\src\\App.js":"2","C:\\Users\\mopat\\fs-practice\\frontend\\src\\ListBody\\ListBody.js":"3","C:\\Users\\mopat\\fs-practice\\frontend\\src\\CreateTask\\CreateTask.js":"4","C:\\Users\\mopat\\fs-practice\\frontend\\src\\axios.js":"5","C:\\Users\\mopat\\fs-practice\\frontend\\src\\Task\\Task.js":"6","C:\\Users\\mopat\\fs-practice\\frontend\\src\\Login\\Login.js":"7","C:\\Users\\mopat\\fs-practice\\frontend\\src\\firebase.js":"8","C:\\Users\\mopat\\fs-practice\\frontend\\src\\Redux\\index.js":"9","C:\\Users\\mopat\\fs-practice\\frontend\\src\\Timer\\Timer.js":"10","C:\\Users\\mopat\\fs-practice\\frontend\\src\\Modal\\Modal.js":"11"},{"size":537,"mtime":1610206158115,"results":"12","hashOfConfig":"13"},{"size":2387,"mtime":1614212848941,"results":"14","hashOfConfig":"13"},{"size":3344,"mtime":1614223862736,"results":"15","hashOfConfig":"13"},{"size":1183,"mtime":1610491930270,"results":"16","hashOfConfig":"13"},{"size":232,"mtime":1614225802852,"results":"17","hashOfConfig":"13"},{"size":4186,"mtime":1611811299573,"results":"18","hashOfConfig":"13"},{"size":3156,"mtime":1614224272638,"results":"19","hashOfConfig":"13"},{"size":225,"mtime":1614226779545,"results":"20","hashOfConfig":"13"},{"size":580,"mtime":1610841686737,"results":"21","hashOfConfig":"13"},{"size":553,"mtime":1610307649449,"results":"22","hashOfConfig":"13"},{"size":1863,"mtime":1610324877183,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"aehctb",{"filePath":"27","messages":"28","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"26"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"26"},"C:\\Users\\mopat\\fs-practice\\frontend\\src\\index.js",[],["51","52"],"C:\\Users\\mopat\\fs-practice\\frontend\\src\\App.js",["53","54","55","56"],"import React, {useEffect, useState} from \"react\"\nimport './App.css';\nimport CreateTask from './CreateTask/CreateTask';\nimport ListBody from \"./ListBody/ListBody\"\nimport {connect} from \"react-redux\"\nimport Login from \"./Login/Login\"\nimport {Avatar} from \"@material-ui/core\"\nimport Timer from \"./Timer/Timer\"\nimport axios from \"./axios\"\nimport Modal from \"./Modal/Modal\"\nimport store from \"./Redux/index\"\n\n\n\nfunction App({username, userInfo, completions}) {\n  const [userFound, setUserFound] = useState(false)\n  const [tasks, setTasks] = useState([])\n  const [count, setCount] = useState(0)\n\n\n  useEffect(() => {\n    if(userInfo && !userFound){\n          \n      let uid = {\n        uid: userInfo.user.uid\n      }\n\n      console.log(uid)\n      \n      axios.get(\"/tasks\", {uid: userInfo.user.uid})\n        .then((response) => {\n          console.log(response)\n          setUserFound(true)\n          setCount(response.data.completions)\n          console.log(\"user found\")\n        })\n        .catch((error) => {\n          console.log(error)\n          if(error){\n            console.log(\"user not found\")\n            axios.post(\"/tasks\", {uid: userInfo.user.uid, completions: 0, tasks: [\"Welcome to the best Task Manager\"]})\n          }\n        })\n         \n    }\n   \n  }, [])\n\n\n  return (\n    <div className=\"App\">\n\n      {username ? (\n        <div>\n          \n          <Timer />\n\n          <h1 className = \"title\">Very Simple Task Manager</h1>\n\n          <div className=\"pro-pic\">\n            <div className=\"info\">\n              <p style = {{marginRight: \"10px\"}}>Welcome, {username}</p>\n              <p style = {{marginRight: \"10px\", marginTop: \"-20px\"}}>Completed tasks: {count}</p>\n            </div>    \n            <Avatar id = \"pic\" src = {userInfo.user.photoURL} style = {{border: \"2px solid black\"}} />\n          </div>    \n   \n          <div className=\"create\">\n            <CreateTask />\n          </div>\n\n          <div className = \"list-pos\">\n            <ListBody />\n          </div>\n         \n          <div>\n            <Modal />\n          </div>\n\n        </div>\n        \n      )\n      :(\n        <div>  \n            <Login />\n        </div>\n      )\n\n      }\n\n    </div>\n  );\n}\n\n\nconst mapStateToProps = state => {\n  return {\n    username: state.username,\n    userInfo: state.userInfo,\n    completions: state.completions\n  }\n}\n\n\nexport default connect(mapStateToProps)(App);","C:\\Users\\mopat\\fs-practice\\frontend\\src\\ListBody\\ListBody.js",["57","58","59"],"C:\\Users\\mopat\\fs-practice\\frontend\\src\\CreateTask\\CreateTask.js",["60"],"import React, {useState} from 'react'\r\nimport axios from \"../axios\"\r\nimport PostAddIcon from '@material-ui/icons/PostAdd';\r\nimport {connect} from \"react-redux\"\r\nimport store from \"../Redux/index\"\r\n\r\n\r\nfunction CreateTask({userInfo}) {\r\n\r\n    const [task, setTask] = useState(\"\")\r\n   \r\n    function submitTask(){\r\n       \r\n        axios.post(\"/tasks\", {uid: userInfo.user.uid, task: task, currentList: [], newUser: false})\r\n            .then((response) => {\r\n                if(response){\r\n                    console.log(response)\r\n                }\r\n            })\r\n            .catch((err) => {\r\n                console.log(err)\r\n            })\r\n\r\n        setTask(\"\")\r\n        document.getElementById(\"input\").value = \"\"\r\n    }\r\n\r\n\r\n    return (\r\n        <div style = {{marginBottom: \"25px\"}}>\r\n           <input id = \"input\" type = \"text\" onChange = {(e) => {setTask(e.target.value)}}></input>\r\n           <PostAddIcon onClick = {submitTask} style = {{cursor: \"pointer\", marginLeft: \"5px\"}} />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n      userInfo: state.userInfo,\r\n    }\r\n  }\r\n\r\n\r\n  export default connect(mapStateToProps)(CreateTask);\r\n\r\n","C:\\Users\\mopat\\fs-practice\\frontend\\src\\axios.js",[],"C:\\Users\\mopat\\fs-practice\\frontend\\src\\Task\\Task.js",["61","62"],"import React, {useState} from 'react'\r\nimport \"./Task.css\"\r\nimport axios from \"../axios\"\r\nimport Button from '@material-ui/core/Button';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport PublishIcon from '@material-ui/icons/Publish';\r\nimport DoneOutlineIcon from '@material-ui/icons/DoneOutline';\r\nimport Modal from \"react-modal\";\r\nimport {connect} from \"react-redux\";\r\nimport store from \"../Redux/index\";\r\n\r\n\r\n\r\nfunction Task(props) {\r\n    const [edit, showEdit] = useState(false)\r\n\r\n\r\n    function deleteTask(){\r\n        const userInfo = store.getState().userInfo\r\n        \r\n        axios.put(\"/tasks\", {uid: userInfo.user.uid, task: props.task})\r\n            .then((response) => {\r\n                console.log(response)\r\n            })\r\n            .catch((error) => {\r\n                console.log(error)\r\n            }) \r\n    }\r\n\r\n    function completeTask(){\r\n        const userInfo = store.getState().userInfo\r\n        \r\n        axios.put(\"/tasks\", {uid: userInfo.user.uid, task: props.task, isComplete: true})\r\n            .then((response) => {\r\n                console.log(response)\r\n            })\r\n            .catch((error) => {\r\n                console.log(error)\r\n            }) \r\n        \r\n    }\r\n\r\n    function showEditOption(){\r\n        showEdit(!edit)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className = \"task-body\">\r\n            \r\n            <p id = \"text-style\">{props.task}</p>\r\n\r\n            <div id = \"right-info\">\r\n      \r\n                {edit ? (\r\n                    <div style = {{display: \"flex\"}}>\r\n                        <EditModal id = {props.id} oldTask = {props.task} uid = {store.getState().userInfo.user.uid} />\r\n                    </div>\r\n                    \r\n                )\r\n                :(\r\n                    <p></p>\r\n                )\r\n                }\r\n\r\n                \r\n                <div id = \"edit\">\r\n                    <EditIcon onClick = {showEditOption} style = {{cursor: \"pointer\"}} />  \r\n                </div>\r\n\r\n                <div id = \"delete\">\r\n                    <DeleteIcon onClick = {deleteTask} style = {{cursor: \"pointer\"}} />\r\n                </div>\r\n\r\n                <div id = \"done\">\r\n                    <DoneOutlineIcon onClick = {completeTask} style = {{cursor: \"pointer\", fontSize: 'large', color: \"green\"}} />\r\n                </div>\r\n\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n      userInfo: state.userInfo\r\n    }\r\n  }\r\n  \r\nexport default connect(mapStateToProps)(Task);\r\n\r\n\r\n\r\n\r\nexport function EditModal(props){\r\n    var subtitle;\r\n    const [modalIsOpen,setIsOpen] = React.useState(true);\r\n    const [newEdit, setNewEdit] = useState(\"\")\r\n\r\n\r\n    function afterOpenModal() {\r\n      subtitle.style.color = '#f00';\r\n    }\r\n  \r\n    function closeModal(){\r\n      setIsOpen(false);\r\n    }\r\n  \r\n    function editTask(){\r\n        axios.put(\"/edittasks\", {taskId: props.id, task: newEdit, oldTask: props.oldTask, uid: props.uid})\r\n            .then((response) => {\r\n                console.log(response)\r\n            })\r\n            .catch((error) => {\r\n                console.log(error)\r\n            }) \r\n    }\r\n\r\n    return (\r\n        <div>  \r\n            <Modal\r\n                isOpen={modalIsOpen}\r\n                onAfterOpen={afterOpenModal}\r\n                onRequestClose={closeModal}      \r\n                contentLabel=\"Example Modal\"\r\n                className = \"modal-styling\"\r\n            >\r\n  \r\n                <h2 ref={_subtitle => (subtitle = _subtitle)}>Modify Task</h2>\r\n                <p style = {{fontWeight: \"900\", maxWidth: \"70%\"}}> Current Task: {props.oldTask}</p>\r\n\r\n\r\n                <div className = \"submit-scn\">\r\n                    <input type = \"text\" id = \"edit-box\" onChange = {(e) => setNewEdit(e.target.value)}></input> \r\n                    <img style = {{cursor: \"pointer\"}} onClick = {closeModal} src=\"https://img.icons8.com/ios-glyphs/25/000000/macos-close.png\"/>\r\n                    <PublishIcon onClick = {editTask} style = {{cursor: \"pointer\"}} />        \r\n                </div>  \r\n\r\n            </Modal>\r\n        </div>\r\n    );\r\n}\r\n\r\n","C:\\Users\\mopat\\fs-practice\\frontend\\src\\Login\\Login.js",["63","64","65"],"C:\\Users\\mopat\\fs-practice\\frontend\\src\\firebase.js",[],"C:\\Users\\mopat\\fs-practice\\frontend\\src\\Redux\\index.js",[],"C:\\Users\\mopat\\fs-practice\\frontend\\src\\Timer\\Timer.js",[],"C:\\Users\\mopat\\fs-practice\\frontend\\src\\Modal\\Modal.js",["66","67"],"import React from 'react'\r\nimport \"./Modal.css\"\r\n\r\n\r\nfunction Modal() {\r\n\r\n    function toggleModal(){\r\n        document.getElementsByClassName(\"modal\").style.display = \"block\"\r\n    }\r\n\r\n    window.onclick = function(event){\r\n        if(event.target ===  document.getElementById(\"myModal\")){\r\n            document.getElementsByClassName(\"modal\").style.display = \"none\"\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"wrap\">\r\n                <a href=\"#show\" className=\"modal-open\">Click To Show</a>\r\n\r\n                <div className=\"overlay\" id=\"show\">\r\n                <div className=\"modal\">\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\" viewBox=\"0 0 560 280\" preserveAspectRatio=\"true\">\r\n                                                \r\n                <line id=\"svg_3\" fill=\"none\" stroke=\"#000000\" stroke-width=\"2\" x1=\"2.0\" y1=\"2.0\" x2=\"558\" y2=\"2.0\"/>\r\n                \r\n                <line id=\"svg_4\" fill=\"none\" stroke=\"#000000\" stroke-width=\"2\" x1=\"558\" y1=\"278\" x2=\"558\" y2=\"2.0\"/>\r\n                \r\n                <line id=\"svg_2\" fill=\"none\" stroke=\"#000000\" stroke-width=\"2\" x1=\"2.0\" y1=\"278\" x2=\"558\" y2=\"278\"/>\r\n                \r\n                <line id=\"svg_5\" fill=\"none\" stroke=\"#000000\" stroke-width=\"2\" x1=\"2.0\" y1=\"2.0\" x2=\"2.0\" y2=\"278\"/>\r\n                \r\n                </svg>\r\n                <div className=\"modal-inner\">\r\n                    <a href=\"#\" className=\"modal-close\" title=\"Close Modal\">vvvvvvvvvvv</a>\r\n                    <h3>Modal Title</h3>\r\n                    <p> this isthe moniusn  nguivn uigvn uigv nfgi gu nfgun givn guiv ngfivnfguvgn uivfgn i ngfb fgnivu </p>\r\n                </div>\r\n                </div>\r\n                \r\n                </div>\r\n                \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Modal\r\n",{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","severity":1,"message":"73","line":11,"column":8,"nodeType":"74","messageId":"75","endLine":11,"endColumn":13},{"ruleId":"72","severity":1,"message":"76","line":17,"column":10,"nodeType":"74","messageId":"75","endLine":17,"endColumn":15},{"ruleId":"72","severity":1,"message":"77","line":17,"column":17,"nodeType":"74","messageId":"75","endLine":17,"endColumn":25},{"ruleId":"78","severity":1,"message":"79","line":47,"column":6,"nodeType":"80","endLine":47,"endColumn":8,"suggestions":"81"},{"ruleId":"72","severity":1,"message":"82","line":13,"column":23,"nodeType":"74","messageId":"75","endLine":13,"endColumn":30},{"ruleId":"78","severity":1,"message":"83","line":59,"column":8,"nodeType":"80","endLine":59,"endColumn":10,"suggestions":"84"},{"ruleId":"78","severity":1,"message":"83","line":91,"column":8,"nodeType":"80","endLine":91,"endColumn":15,"suggestions":"85"},{"ruleId":"72","severity":1,"message":"73","line":5,"column":8,"nodeType":"74","messageId":"75","endLine":5,"endColumn":13},{"ruleId":"72","severity":1,"message":"86","line":4,"column":8,"nodeType":"74","messageId":"75","endLine":4,"endColumn":14},{"ruleId":"87","severity":1,"message":"88","line":138,"column":21,"nodeType":"89","endLine":138,"endColumn":146},{"ruleId":"72","severity":1,"message":"90","line":8,"column":8,"nodeType":"74","messageId":"75","endLine":8,"endColumn":19},{"ruleId":"72","severity":1,"message":"91","line":13,"column":12,"nodeType":"74","messageId":"75","endLine":13,"endColumn":20},{"ruleId":"72","severity":1,"message":"92","line":13,"column":22,"nodeType":"74","messageId":"75","endLine":13,"endColumn":33},{"ruleId":"72","severity":1,"message":"93","line":7,"column":14,"nodeType":"74","messageId":"75","endLine":7,"endColumn":25},{"ruleId":"94","severity":1,"message":"95","line":36,"column":21,"nodeType":"89","endLine":36,"endColumn":77},"no-native-reassign",["96"],"no-negated-in-lhs",["97"],"no-unused-vars","'store' is defined but never used.","Identifier","unusedVar","'tasks' is assigned a value but never used.","'setTasks' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'userFound' and 'userInfo'. Either include them or remove the dependency array.","ArrayExpression",["98"],"'setName' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'changeMessage' and 'userInfo.user.uid'. Either include them or remove the dependency array.",["99"],["100"],"'Button' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'SelectInput' is defined but never used.","'userInfo' is assigned a value but never used.","'setUserInfo' is assigned a value but never used.","'toggleModal' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","no-global-assign","no-unsafe-negation",{"desc":"101","fix":"102"},{"desc":"103","fix":"104"},{"desc":"105","fix":"106"},"Update the dependencies array to be: [userFound, userInfo]",{"range":"107","text":"108"},"Update the dependencies array to be: [changeMessage, userInfo.user.uid]",{"range":"109","text":"110"},"Update the dependencies array to be: [changeMessage, tasks, userInfo.user.uid]",{"range":"111","text":"112"},[1266,1268],"[userFound, userInfo]",[1639,1641],"[changeMessage, userInfo.user.uid]",[2550,2557],"[changeMessage, tasks, userInfo.user.uid]"]